[{"authors":["admin"],"categories":null,"content":"Hengzhao Hong is an undergraduate student in School of Economics, Xiamen University, majoring in economics. His research interests include applied econometrics, agricultural economics and statistical learning. Also, he is a big fan of programming. With the knowledge of Python and JavaScript, he has developed several scrapies, websites and data visualization systems according to his teacher\u0026rsquo;s or his economic reseach needs.\nAlthough his major is economics, by his interest and in his out-of-class time, he has been qualified and doing a job of front-end engineering as an intren for about a year. He loves designing and attaches great importance to the sense of beauty. He has an \u0026ldquo;OCD\u0026rdquo; of LaTeX when writing.\nRecently, he is focusing on his graduation study. He is engrossed in the elegant freestyle of R Progamming and would rather choose R to do everything if premitted and possible.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":-62135596800,"objectID":"598b63dd58b43bce02403646f240cd3c","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"author","summary":"Hengzhao Hong is an undergraduate student in School of Economics, Xiamen University, majoring in economics. His research interests include applied econometrics, agricultural economics and statistical learning. Also, he is a big fan of programming. With the knowledge of Python and JavaScript, he has developed several scrapies, websites and data visualization systems according to his teacher\u0026rsquo;s or his economic reseach needs.\nAlthough his major is economics, by his interest and in his out-of-class time, he has been qualified and doing a job of front-end engineering as an intren for about a year.","tags":null,"title":"Hengzhao Hong","type":"author"},{"authors":["Hengzhao Hong"],"categories":["GitHub"],"content":" 本文介绍了如何在 Windows 上使用 Jekyll 框架搭建 GitHub Pages 个人博客。\n 使用 Jekyll + GitHub Pages ，可以在短时间内搭建出精美、个性的博客、项目网站或者线上简历等。我们只需要专注于编辑文章内容，将文章放入预设的模板（主题）中，再将全部文件提交到 GitHub 上，网站就会自动完成构建了。\n 使用 Jekyll 搭建的博客案例：\n Blog of Zach Holman  搭建 GitHub Pages - 极速尝鲜 如果你是零基础的话，现在用最快最简单的方法搭建一个 GitHub Page 吧！\n如果想更加个性化地使用 GitHub Page，可以直接跳过这一步。\n 本地编辑的技能可以尝鲜之后再慢慢补上嘛。\n 第一步：获取 Jekyll 模板，生成网站 如果没有 GitHub 账号，先在 GitHub 上注册一个。\n登录 GitHub，从以下 Jekyll 官方收录的主题中选择一个中意的样式，然后打开其 GitHub 项目界面。\n http://jekyllthemes.org/ https://jekyllthemes.io/  以 Kiko Plus 主题为例，点击 Homepage 找到项目主页。\n 也可以进入示例（Demo）页面，点击页面最下方的 GitHub 按钮进入项目主页。大多数主题的项目主页都可以这样找到。\n 进入 kiko-now 项目主页，根目录文件结构应该类似这样：\n点击 Fork 按钮，从而将这个库复制到自己的远程库中。\n进入自己的 kiko-now 库，在 Settings 里将库名改为 \u0026lt;你的用户名\u0026gt;.github.io，比如 honghzh.github.io。\n 此时，GitHub 会自动识别这个库，并基于库里的文件（也就是你刚刚“复制”的 Jekyll 主题模板文件）自动构建你的 GitHub Page。\n在许多主题项目的 README.md 中也会有使用说明。\n 等待片刻，直接访问 \u0026lt;你的用户名\u0026gt;.github.io，就可以看到自己的博客了。\n第二步：定制博客信息 在你的网站项目库中，打开根目录的 _config.yml，按照文件中的提示修改文件，把原来的博客信息（姓名、邮箱、github地址、文章网址格式等）改成你自己想要的配置信息，然后提交（Commit）即可。\n第三步：写文章 在你的网站项目库 _posts 文件夹中，新建一个 .md 文件，模仿原有的示例文件编辑文件头部（配置标题、发表时间等，常用配置规则），然后使用 Markdown 语言写文章（Markdown 简明语法规则），保存提交（Commit）即可。\n\r每篇文章的 markdown 文件都必须命名为 year-month-day-title.md 格式，这是 Jekyll 框架所要求的。\n\r\r等待片刻，直接访问 \u0026lt;你的用户名\u0026gt;.github.io ，会发现博客信息已经变味你自己的，而且文章也更新了。\n 如果文章没有出现，可能是文件命名有误，或者发表时间有误（或时区问题导致现在尚未到发表时间）。\n 现在你已经成功使用 Jekyll + GitHub Pages 搭建出个人网站了！\n如果你还想：\n 在本地用你喜欢的编辑器编辑文章 在本地实时预览文章效果和博客修改效果（本地预览比 GitHub 在线构建快得多） 在已有主题（或空白主题）的基础上，设计自己的博客样式 喜欢那种随心支配所有代码、掌控全局的感觉（比如我）  那么请看下面的完整版：\nJekyll + GitHub Pages 本地调试与线上搭建 在 GitHub 上的准备 首先，在 GitHub 上注册一个账号。\n 注意：接下来的步骤与前一节（极速尝鲜版）不同\n 登录 GitHub 后，访问 https://github.com/new 可以开始新建一个库（或点击顶部 + 号按钮 -\u0026gt; New repository），库名（Repository name）必须设为 \u0026lt;你的用户名\u0026gt;.github.io，选择库的类型为公共库（Public），从而创建一个新库，用于在 GitHub 上存放你的网站。\n 如果这个库已经存在，那么需要把原库先改名或删除。\n 本地调试所需的准备 因为 Jekyll 框架是基于 Ruby 语言构建的，所以，如果要在本地编辑和预览，你的计算机显然也要学会 Ruby 语言。\n安装 Ruby 在 Windows 系统安装 Ruby 很简单。直接访问 Ruby Installer for Windows下载安装程序，注意要下载 Ruby + DevKit 的集成版本，其中 DevKit 是 Ruby 的开发工具包，后续安装 Jekyll 框架时必须用到它。\n然后，一路安装即可，安装完成的最后会询问是否安装开发者工具（MSYS2 Devkit），选择“是”。\n安装 MSYS2 Devkit 时，会询问安装的范围，选择 1 或 3 安装整个开发工具包（MSYS2 toolchain）。\n修改 RubyGems 的默认下载源  Ruby 安装完毕后，需要使用 Ruby 自带的包管理工具（RubyGems）安装 Jekyll 包。\n RubyGems 默认下载源在国外，由于众所周知的原因，国内下载 Jekyll 等包的速度奇慢，因此需要先把下载源改为国内的官方镜像。\n打开命令窗口（可以按Shift后从右键菜单打开），依次执行：\ngem sources --add https://gems.ruby-china.com/ --remove https://rubygems.org/ gem sources -l # 将显示 https://gems.ruby-china.com # 确保只有 gems.ruby-china.com  修改完成。\n安装 Jekyll  因为我们要用 GitHub Page 构建网站，所以这里强烈推荐 GitHub Pages Gem 项目提供的 github-pages 包，它集成了 Jekyll 和 Jekyll 所需的所有依赖包（Dependencies），并且所有包都维护在 GitHub Page 支持的版本下。\n 推荐直接安装 github-pages 包（其中集成了 Jekyll），命令是：\ngem install github-pages  这样就可以避开很多的版本依赖和版本支持的问题。\n安装 Git  Git 是一个版本控制工具，Git 在这里用于关联和管理 GitHub 上刚才新建的远程库和本地的网站文件夹（本地库）。\nGit 是 GitHub 存在的基石。被 Git 工具所维护的文件夹叫做“库”（Repository），本地的文件夹就是本地库，在服务器上的文件夹就是远程库。GitHub 只是一个托管远程库，方便远程协作和储存版本的平台罢了。\n 从 Git 官网 上下载 Git 并安装即可。安装完成后，右键菜单会多出 Git Bash Here，点击后可以打开 Git 命令行，后续会在里面运行 git \u0026lt;命令\u0026gt;。\n安装文本编辑器  文本编辑器是一种编程工具，主流的编辑器有 NotePad++, Vs Code, Sublime Text 等，它们可以在编辑代码时提供高亮、提示、编译等功能。\n 如果本地没有文本编辑器，推荐安装VS Code，之后将使用文本编辑器打开/编辑本地的网站文件。\n本地调试 从以下 Jekyll 官方收录的主题中选择一个中意的样式，然后打开其 GitHub 项目界面。\n http://jekyllthemes.org/ https://jekyllthemes.io/  使用 git clone 命令将主题项目下载到本地。\n以 kiko-now 项目为例，首先在项目主页复制 git clone 的目标地址：\n然后在本地右键 - Git Bash Here，执行 git 命令：git clone \u0026lt;目标地址\u0026gt; 即可：\ngit clone https://github.com/aweekj/kiko-now.git  在项目根目录，命令行运行 jekyll serve，然后在浏览器地址栏中输入 localhost:4000 即可访问本地预览。\n在命令行窗口连续按 Ctrl+C ，再输入 y 确认退出，即可退出本地预览。\n配置博客信息、写文章 修改根目录的 _config.yml，即可配置自己的博客信息。注意，这个文件修改保存后，需要重新运行 jekyll serve 才能看到修改效果。\n在 _post 文件夹下新建 .md 文件，按原有示例文件的格式输入文件头部（配置标题、发表时间等，常用配置规则），然后使用 Markdown 语言写文章（Markdown 简明语法规则），保存即可。\n\r每篇文章的 markdown 文件都必须命名为 year-month-day-title.md 格式，这是 Jekyll 框架所要求的。\n\r\r文章编辑过程中，可以随时保存，并刷新 localhost:4000 查看最新的预览。\n编译 可选步骤：命令行 jekyll build 将编译网站文件，编译好的网站文件默认位于根目录的 _site 文件夹中。\n提交生成 GitHub Page 提交到 GitHub 上的两种形式：\n 可以直接将 _site 文件夹内的文件提交到 GitHub（需先用 jekyll build 编译）。 也可以将整个网站文件夹提交上去（此时无需用 jekyll build 编译）。  方法：\n 前期准备时，在 GitHub 上有一个名为 \u0026lt;你的用户名\u0026gt;.github.io 的库，现在将它 git clone 克隆到本地（在模板文件夹的外部），作为本地网站文件夹。 按上述两种形式中的一种，将所需文件复制进刚才 git clone 的文件夹内。 在本地网站文件夹内，右键 - git bash here，依次执行下列命令：\ngit add . git commit -m \u0026quot;\u0026lt;提交版本的名字，自定义\u0026gt;\u0026quot; git push origin master     如果复制文件到本地网站库时，你是将整个主题项目库复制进去的，那么以后可以直接在本地网站库中修改、预览，最后执行以上三条命令，即可将修改推送到自己的 GitHub 上。 如果只复制 _site 文件夹，那么需要在主题项目库中编辑、预览，然后重复上述方法来更新网站。   片刻之后，直接访问 \u0026lt;你的用户名\u0026gt;.github.io 即可查看你的博客网站，效果与本地预览相同（除某些特殊插件效果外）。\nWell done !\n","date":1553088895,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1553088895,"objectID":"275c878723fe7c82db8971ecb400c6af","permalink":"/post/a-guidance-to-beautiful-jekyll-pages/","publishdate":"2019-03-20T21:34:55+08:00","relpermalink":"/post/a-guidance-to-beautiful-jekyll-pages/","section":"post","summary":"How to build a beautiful GitHub Page via Jekyll on Windows?","tags":["Jekyll","Blog"],"title":"A Guidance to Beautiful Jekyll Pages","type":"post"},{"authors":["Hengzhao Hong"],"categories":["Tools"],"content":" 本篇总结了 Git 使用过程中主要将用到的命令和其它一些问题的解决方法，包括：\n Git 分支管理 本地仓库-远程仓库的拉取/推送/关联 .gitignore 文件。 用户邮箱配置 SSH Key 配置  分支 创建 Git 分支，可以在原来的版本链上衍生出一条新的、独立的版本链，在新链上进行开发，再合并到主链中，这是协同开发和版本控制的精髓。\n增删分支 # 创建分支 git branch new_branch_name # 切换分支 git checkout branch_name # 创建分支，并切换到新分支 git checkout -b new_branch_name # 合并分支 git merge branch_name # 删除分支 git branch -d branch_name  查分支 # 检查分支版本 git log --oneline --decorate # 查看分支分叉历史 git log --oneline --decorate --graph --all  从另一个分支同步特定文件 git checkout \u0026lt;另一个分支名\u0026gt; \u0026lt;特定文件名\u0026gt;\n远程库推送、拉取 本节内容为如何关联本地库与远程库，将你的代码托管在网络上，作为备份或和合作者协同开发。\n远程库查询、增加、删除 # 查询 git remote -v # 增加 git remote add origin \u0026lt;你的项目地址\u0026gt; # 删除 git remote rm origin  推送到远程库 git push \u0026lt;远程主机名\u0026gt; \u0026lt;本地分支名\u0026gt;:\u0026lt;远程分支名\u0026gt;  首次推送并关联分支 git push -u origin master  从远程库拉取 git pull = git fetch + git merge\ngit pull \u0026lt;远程主机名\u0026gt; \u0026lt;远程分支名\u0026gt;:\u0026lt;本地分支名\u0026gt;  如果报错：本地和远程库是独立构建的，那么添加如下参数即可：\ngit pull origin master --allow-unrelated-histories  .gitignore 在 .gitignore 文件中声明的文件名，将不会被 Git 追踪（也就不会对它们进行版本控制、推送到远程库等），除非在更新 .gitignore 之前它们已经被追踪。\n.gitignore 只对未追踪的文件生效 解决方法 注意：该方法会将暂存区里面的文件也同时删除！\n在目标分支下，\ngit rm -r --cached \u0026lt;想重新忽略的文件名\u0026gt; git add . git commit -m \u0026quot;update gitignore\u0026quot;  设置 Git 用户名和邮箱 全局范围配置方法 git config --global user.name \u0026quot;github’s Name\u0026quot; git config --global user.email \u0026quot;github@xx.com\u0026quot; git config --list  只作用于当前项目的配置方法 git config user.name “gitlab’s Name” git config user.email \u0026quot;gitlab@xx.com\u0026quot; git config --list   也可以直接修改项目文件夹的 .git/config 文件，这个文件还可以配置 Git 的很多东西，包括关联的远程库地址、用户等。\n SSH Key SSH Key 是一个身份标识，用于让远程库（比如 GitHub）识别出你这台计算机的身份，从而不需要密码就可以安全提交。\n第一步：生成 public key 和 private key cd ~/.ssh ls # 此时会显示一些文件 mkdir key_backup cp id_rsa* key_backup rm id_rsa* # 以上三步为备份和移除原来的SSH key设置 ssh-keygen -t rsa -C \u0026quot;邮件地址@youremail.com\u0026quot; #生成新的key文件,邮箱地址填你的Github地址 # Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):\u0026lt;回车就好\u0026gt; #如果是二次创建，需要输入新的文件名 # 接下来会让你输入密码  第二步：查看 SSH 公钥 cd ~/.ssh ls # 会列出文件，里面包含公钥文件 vim id_rsa.pub # 用 vim 编辑器打开公钥文件 # 复制文件内容到 github 即可  第三步：测试 SSH ssh -T git@github.com # 之后会要你输入yes/no,输入yes就好  一台电脑多个 Git 账号，配置多个 SSH Key 的方法 第一步：创建 SSH KEY 同上\n第二步：配置 config 文件 查看用户~/.ssh下是否存在 config文件，如不存在使用命令 touch config创建，然后配置config\n# 配置github.com Host github.com HostName github.com IdentityFile C:\\\\Users\\\\popfisher\\\\.ssh\\\\id_rsa_github PreferredAuthentications publickey User username1 # 配置git.oschina.net Host git.oschina.net HostName git.oschina.net IdentityFile C:\\\\Users\\\\popfisher\\\\.ssh\\\\id_rsa_oschina PreferredAuthentications publickey User username2  第三步：测试 ssh -T git@git.oschina.net  如果配置正确会提示 Hi your git account two in github ! You've successfully authenticated, but GitHub does not provide shell access.\n使用方法：clone 项目到本地 原先操作是: git clone git@github.com:yourAccount/xxx.git\n现改为：git clone git@git.oschina.net:yourAccount/xxx.git\n","date":1550286142,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1550286142,"objectID":"ca71c7e56a5ef5f2b93facc48cf878fa","permalink":"/post/useful-commands-of-git/","publishdate":"2019-02-16T11:02:22+08:00","relpermalink":"/post/useful-commands-of-git/","section":"post","summary":"This article provides elegant ways to use Git.","tags":["Git"],"title":"Useful Commands of Git","type":"post"},{"authors":["Hengzhao Hong"],"categories":["Tools"],"content":" 本文是一篇入门文章，简单介绍了 Git、 GitHub 以及 GitHub Pages。\nGit Git 是一个版本控制工具。\n版本控制是什么意思？\n版本控制 比如，你想对电脑上某个文件夹进行版本控制，你首先会告诉 Git :\n\r“这个文件夹的一举一动，帮我盯紧了！”\n\r\r 具体实现：安装 Git（Git 官网），在项目文件夹中，右键 -\u0026gt; Git Bash Here，打开 Git 命令窗口，执行 git init 命令。\n Git 就会把这个文件夹看成一个 Git 仓库（repository）来照看它，仓库里多了什么、少了什么，都逃不过 Git 的火眼金睛。\n接着，你在这个仓库中删除了一些文件，又新建了一些文件，还修改了一些文件，告诉 Git：\n\r“这是这个库的一个新的版本了，记住它。”\n\r\r 具体实现：先暂存，后提交\n暂存版本：git add .\n提交新版本：git commit -m \u0026quot;\u0026lt;提交信息\u0026gt;\u0026quot;\n Git 就会在小本子上记下：\n\r“某年某月某日，主人提交了这个仓库（repository）的一个新版本，现在仓库里有这些文件，文件的内容分别是 XXX...”\n\r\r很多天过去了，你又作了很多改动，提交了很多个版本。\n 你显然难以完整记得自己改了哪些地方。\n 因为一些原因，你想要把这个文件夹恢复到某个历史版本，Git 能帮你做到：\n\r\u0026ldquo;Git 哟，请把这个文件夹(或者说仓库, repository)恢复到某年某月某日我提交的那个版本啊~\u0026rdquo;\n\r\r 根据不同需求，版本回退有多种命令行实现。\n Git 就会开始翻看它的小本子，看到自己之前写的记录，想道：\n\r 那个历史版本有这些文件，文件内容是XXX... 现在的仓库内容是XYY... 现在的版本多出了 YY...，少了 XX... 根据比较结果，可以进行版本回退 于是，我把现在的这个仓库(repository，或者说文件夹)改变了回那天提交的版本.  \r\r这样，你就会看到这个文件夹里的文件和它们的内容都变回历史版本了。\nGit 分支 你可以让 Git 对同一个仓库（repository）建立很多“小本子”，它们相互独立。\n 每本小本子就是项目的一个 Git 分支\n具体实现：执行 git checkout -b \u0026lt;新分支的名字\u0026gt;，可以基于当前分支新建一个分支\n 你和你的合作者们分工，一项大任务专门用一本小本子控制版本，各自独立工作。\n 切换分支： git checkout \u0026lt;分支名\u0026gt;\n 大家都完成任务后，把本子合并起来，就把整个项目安全地往前推进了一大步。\n 合并分支： git merge\n 这种相互独立的“小本子工作法”就是使用 Git 分支的工作流程，也是 Git 工作的精髓之一。\nGit 本地仓库-远程仓库 仓库可以建立在本地（本地仓库），也可以建立在服务器上（远程仓库）。\n你可以把一些本子放到网络服务器上，更新服务器上的仓库。\n 具体实现：执行 git push\n 也可以把网上的“小本子”克隆到本地，从而能同步本地的仓库。\n 具体实现：根据情境，使用 git pull 或 git clone\n  远程分支(remote branch)：这些放在网络服务器上的小本子 远程仓库(remote repository)：储存在网上、使用这些远程分支进行“版本控制”的文件夹(repository)  About GitHub GitHub 是由一批优秀程序员搭建起来的 Git 远程仓库的免费托管平台。\n只需要在 GitHub 网站进行简单账户设置，用 Git 命令让它和本地的 Git 客户端关联起来，就可以实现在线版本管理、同步甚至多人协作的功能，而不用自己搭建服务器、建立远程仓库了，岂不美哉？\nAbout GitHub Pages GitHub Pages 是 GitHub 的一个功能，可以帮助你搭建自己的展示网站，原理是:\n 读取你发布到 GitHub 上的特定远程仓库 把里面的文件渲染成对应的网页 用 GitHub 自己的服务器帮你把网页搭建在以你的用户名作为一部分命名的网址上( 例如 username.github.io/ )  现在你对整个原理应该有大致理解了~\n","date":1521992549,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1521992549,"objectID":"ac54ed6b2552e7aec92a68fdad782a9f","permalink":"/post/a-sketch-of-git-theory/","publishdate":"2018-03-25T23:42:29+08:00","relpermalink":"/post/a-sketch-of-git-theory/","section":"post","summary":"What is Git, and how about Github and Github Pages?","tags":["Git","ABC"],"title":"A Sketch of Git Theory","type":"post"}]